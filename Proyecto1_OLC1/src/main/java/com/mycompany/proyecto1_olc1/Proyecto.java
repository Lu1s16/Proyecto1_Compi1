/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto1_olc1;

import Analizadores.Lexico;
import Analizadores.Sintactico;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import Analizadores.Arboles;
import java.io.BufferedWriter;
import java.io.FileWriter;
import javax.swing.JOptionPane;

/**
 *
 * @author Luis
 */
public class Proyecto extends javax.swing.JFrame {

    /**
     * Creates new form Proyecto
     */
    public Proyecto() {
        initComponents();
    }
    
    public String archivo_actual;
    public String archivo_guardar;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Crear_archivo = new javax.swing.JButton();
        Abrir_archivo = new javax.swing.JButton();
        Guardar_como = new javax.swing.JButton();
        Guardar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        leer_archivo = new javax.swing.JButton();
        name_file = new javax.swing.JLabel();
        console = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Crear_archivo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Crear_archivo.setText("Crear archivo");
        Crear_archivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Crear_archivoActionPerformed(evt);
            }
        });

        Abrir_archivo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Abrir_archivo.setText("Abrir archivo");
        Abrir_archivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Abrir_archivoActionPerformed(evt);
            }
        });

        Guardar_como.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Guardar_como.setText("Guardar como");
        Guardar_como.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Guardar_comoActionPerformed(evt);
            }
        });

        Guardar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        text.setColumns(20);
        text.setRows(5);
        jScrollPane1.setViewportView(text);

        leer_archivo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        leer_archivo.setText("Leer archivo");
        leer_archivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leer_archivoActionPerformed(evt);
            }
        });

        name_file.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        name_file.setText("Archivo actual");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(console)
                    .addComponent(name_file, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leer_archivo)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Crear_archivo)
                        .addGap(33, 33, 33)
                        .addComponent(Abrir_archivo)
                        .addGap(29, 29, 29)
                        .addComponent(Guardar_como)
                        .addGap(35, 35, 35)
                        .addComponent(Guardar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Crear_archivo)
                    .addComponent(Abrir_archivo)
                    .addComponent(Guardar_como)
                    .addComponent(Guardar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(name_file, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(leer_archivo)
                .addGap(18, 18, 18)
                .addComponent(console, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Crear_archivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Crear_archivoActionPerformed
        // TODO add your handling code here:
        JFileChooser selector_archivos = new JFileChooser();
        selector_archivos.setDialogTitle("Crear nuevo archivo");
        selector_archivos.setFileFilter(new FileNameExtensionFilter("archivos OLC(.olc)", "olc"));
        int opcion = selector_archivos.showSaveDialog(this);
        
        if(opcion == JFileChooser.APPROVE_OPTION){
            archivo_actual = selector_archivos.getSelectedFile().getName();
            
            
            if(!archivo_actual.toLowerCase().endsWith(".olc")){
                archivo_actual+=".olc";
            }
            //ruta completa con extension
            archivo_guardar = selector_archivos.getSelectedFile().getAbsolutePath()+".olc";
            System.out.println(archivo_guardar);
            name_file.setText(archivo_actual);
            
            text.setText("");
            String contenido = "";
            
            try {
                
                //Escribo el conenido en un archivo
                BufferedWriter writer = new BufferedWriter(new FileWriter(archivo_actual));
                writer.write(contenido);
                writer.close();
                JOptionPane.showMessageDialog(this, "Archivo creado correctamente");
            } catch (IOException ex){
                JOptionPane.showMessageDialog(this, "Error al crear archivo: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        }
        
        console.setText("Se creo archivo correctamente");
        
        
    }//GEN-LAST:event_Crear_archivoActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        // TODO add your handling code here:
        
        //Contiene la ruta completa
        System.out.println(archivo_guardar);
        //Contiene solo el nombre
        name_file.setText(archivo_actual);
        
        
        File archivo = new File(archivo_guardar);
        System.out.println(archivo_guardar);
        //Borro el archivo
        archivo.delete();
            System.out.println("borrado");
            //Almaceno el nuevo_contenido
            String nuevo_contenido = text.getText();
            try {
                
                
                File file = new File(archivo_guardar);
                
                
                if(!file.exists()){
                    file.createNewFile();
                }
                
                FileWriter fw = new FileWriter(file);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write(nuevo_contenido);
                bw.close();
                
        
               
                JOptionPane.showMessageDialog(this, "Se guardaron cambios");
            
            } catch (IOException ex){
                JOptionPane.showMessageDialog(this, "Error al guardar el archivo: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            console.setText("Se guardaron cambios correctamente");
        
    }//GEN-LAST:event_GuardarActionPerformed

    private void leer_archivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leer_archivoActionPerformed
        // TODO add your handling code here:
        
        try {
            
            Lexico lexico = new Lexico(new BufferedReader(new StringReader(text.getText())));
            Sintactico sintactico = new Sintactico(lexico);
                    
                    //Se ejecuta el lexico y sintactico.
            sintactico.parse();
        
            if(lexico.errores.isEmpty()){
                //no hay errores
                System.out.println("No hay errores");
                console.setText("Se crearon reportes correctamente");
                
            } else {
            
                //si los hay y borrar todo lo creado
                //general archivo de errores
                System.out.println("Hay errores");
            
                String directoryName = System.getProperty("user.dir");
            
                //borrar carpeta arbol
                File archivo_arbol = new File(directoryName+"/ARBOLES_202010814");
            
                File[] ficheros_arbol = archivo_arbol.listFiles();
            
                for(int x=0; x<ficheros_arbol.length; x++){
      
                    ficheros_arbol[x].delete();
                    
                
                }
            
                //borrado de carpeta afd
                File carpeta_afd = new File(directoryName+"/AFD_202010814");
                File[] ficheros_afd = carpeta_afd.listFiles();
            
                for(int x=0; x<ficheros_afd.length; x++){
      
                    ficheros_afd[x].delete();
                    
                
                }
            
            
            
                //borrado de carpeta_afnd
                File carpeta_afnd = new File(directoryName+"/AFND_202010814");
            
                File[] ficheros_afnd = carpeta_afnd.listFiles();
            
                for(int x=0; x<ficheros_afnd.length; x++){
      
                    ficheros_afnd[x].delete();
                    
                
                }
            
            
            
                //borrado de carpeta siguientes
                File carpeta_siguientes = new File(directoryName+"/SIGUIENTES_202010814");
                File[] ficheros_siguientes = carpeta_siguientes.listFiles();
            
                for(int x=0; x<ficheros_siguientes.length; x++){
      
                    ficheros_siguientes[x].delete();
                    
                
                }
            
            
            
                //borrado de carpeta transiciones
                File carpeta_transiciones = new File(directoryName+"/TRANSICIONES_202010814");
                File[] ficheros_transiciones = carpeta_transiciones.listFiles();
            
                for(int x=0; x<ficheros_transiciones.length; x++){
      
                    ficheros_transiciones[x].delete();
                    
                
                }
            
                //creo el archivo html
           

                String reporte_html = "<html>\n" +
                                            "<head>\n" +
                                            "    <title>Reporte errores</title>\n" +
                                            "</head>\n" +
                                            "<body>\n" +
                                            "    \n" +
                                            "    <h2 align=\"center\"> Tabla errores</h2>\n" +
                                            "\n" +
                                            "    <table border=\"1\", align=\"center\">\n" +
                                            "        <tr>\n" +
                                            "            <td>#</td>\n" +
                                            "            <td>Tipo error</td>\n" +
                                            "            <td>Descripcion</td>\n" +
                                            "            <td>Linea</td>\n" +
                                            "            <td>Columna</td>\n" +
                                            "        </tr>\n";
                int contador = 1;
                String datos = "";
                for(int i = 0; i<lexico.errores.size(); i++){
               
                    datos+="<tr>\n" +
                    "            <td>"+ contador +"</td>\n" +
                    "            <td>Lexico</td>\n" +
                    "            <td>El caracter: "+ lexico.errores.get(i).getSimbolo_error() +" no corresponde al lenguaje</td>\n" +
                    "            <td>"+ lexico.errores.get(i).getLinea() +"</td>\n" +
                    "            <td>"+ lexico.errores.get(i).getColumna() +"</td>\n" +
                    "        </tr>\n";
               
                    contador++;
               
                }
           
                reporte_html+=datos;
           
                reporte_html+="    </table>\n" +
                " \n" +
                "</body>\n" +
                "</html>";
           
                String archivo_reporte = "reporte.html";
           
          
                try{
              
                    File f = new File(directoryName+"/ERRORES_202010814", archivo_reporte);
                    if(!f.exists()){
                        f.createNewFile();
                    }
              
                    FileWriter fw = new FileWriter(f);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(reporte_html);
                    bw.close();
              
              
                } catch(IOException e1) {
                    System.out.println(e1);
                }
                
                console.setText("No se pudo generar reportes por errores lexicos");

            
            }
        

            System.out.println("Hello world");

        
            System.out.println("Expresiones");
        
            //Extraer expresiones
            
            
        } catch (Exception ex) {
            
            Logger.getLogger(Proyecto.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error fatal en compilación de entrada." + ex);
        }
        
        
        
        
    }//GEN-LAST:event_leer_archivoActionPerformed

    private void Abrir_archivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Abrir_archivoActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de texto", "olc");
        chooser.setFileFilter(filter);
        //archivo_actual = chooser.getSelectedFile().getAbsolutePath();
        
        //Muestra la ventana
        int resultado = chooser.showOpenDialog(null);
        
        if (resultado == JFileChooser.APPROVE_OPTION){
            File archivo = chooser.getSelectedFile();
            archivo_actual = chooser.getSelectedFile().getName();
            archivo_guardar = chooser.getSelectedFile().getAbsolutePath();
            name_file.setText(archivo_actual);
            System.out.println(archivo_guardar);
 
            try {
                FileReader fr = new FileReader(archivo);
                BufferedReader br = new BufferedReader(fr);
               
                
                //Para guardar contenido en una variable
                StringBuilder sb = new StringBuilder();
                
                String linea;
                
                while ((linea = br.readLine()) != null) {
                    sb.append(linea+"\n");
                    //System.out.println(linea);
                }
                
                br.close();
                fr.close();
                
                String contenido = sb.toString();
                
                text.setText(contenido);
                
                
                
                
            } catch (IOException e) {
                System.out.println("Error al leer el archivo: " + e.getMessage());
            }
            
            
            console.setText("Se abrio correctamente el archivo");
            
                    
                    
        }
        
    }//GEN-LAST:event_Abrir_archivoActionPerformed

    private void Guardar_comoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Guardar_comoActionPerformed
        // TODO add your handling code here:
        if(evt.getActionCommand().equals("Guardar como")){
            //System.out.println("Guardar como");
            JFileChooser selector_archivos = new JFileChooser();
            selector_archivos.setFileFilter(new FileNameExtensionFilter("archivos OLC(.olc)", "olc"));
            int opcion = selector_archivos.showSaveDialog(this);
            if (opcion == JFileChooser.APPROVE_OPTION) {
                archivo_actual = selector_archivos.getSelectedFile().getName();
                archivo_guardar = selector_archivos.getSelectedFile().getAbsolutePath()+".olc";
                
                
                if(!archivo_actual.toLowerCase().endsWith(".olc")){
                    archivo_actual+=".olc";
                }
                name_file.setText(archivo_actual);
                //Obtengo el contenido del textArea
                String contenido = text.getText();
                try {
                    //Escribo el conenido en un archivo
                    BufferedWriter writer = new BufferedWriter(new FileWriter(archivo_actual));
                    writer.write(contenido);
                    writer.close();
                    JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente");
                } catch (IOException ex){
                    JOptionPane.showMessageDialog(this, "Error al guardar el archivo: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        
        console.setText("Se guardo correctamente");
        
    }//GEN-LAST:event_Guardar_comoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Proyecto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Abrir_archivo;
    private javax.swing.JButton Crear_archivo;
    private javax.swing.JButton Guardar;
    private javax.swing.JButton Guardar_como;
    private javax.swing.JTextField console;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton leer_archivo;
    private javax.swing.JLabel name_file;
    private javax.swing.JTextArea text;
    // End of variables declaration//GEN-END:variables
}
